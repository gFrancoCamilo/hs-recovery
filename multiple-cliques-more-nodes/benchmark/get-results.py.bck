import subprocess
import os
import numpy as np
import json

BASE_PORT = 10000
class Scenario:

    def __init__ (self, faults, number_chains = 3, number_recoveries = 2, allow_communications = 50, network_delay=1):
        self.faults = faults
        self.allow_communications = allow_communications
        self.network_delay = network_delay
        # This is the number of forks to recover from
        self.number_chains = number_chains
        # This is the number of recoveries
        self.number_recoveries = number_recoveries


    def  _get_number_honest_parties (self):
        return self.faults + 1
    
    def _get_number_shadows (self):
        '''Number of duplicates in the system'''
        return self.faults * 2 
    
    def _get_total_number_nodes (self):
        return self.faults * 2 * 2 + self.faults + 1

    def _get_honest_parties(self):
        return [i for i in range(self._get_number_honest_parties())]
    
    def _get_cliques (self):
        nodes = [i for i in range(self._get_total_number_nodes())]
        honest_parties = self._get_honest_parties()
        byzantine_nodes = nodes[self._get_number_honest_parties():]

        cliques = np.array_split(np.array(honest_parties), 2)
        cliques_byzantine = np.array_split(np.array(byzantine_nodes), 2)
        cliques = [clique.tolist() for clique in cliques]
        cliques_byzantine = [clique.tolist() for clique in cliques_byzantine]

        cliques_byzantine[0] += cliques[0]
        cliques_byzantine[1] += cliques[1]
        #for i, clique in enumerate(cliques):
        #    clique.append(honest_parties[i])
        return cliques_byzantine
    def _create_dns_file (self):
        dns = {}
        for i in range(self._get_total_number_nodes()):
            dns[i] = "127.0.0.1:" + str(BASE_PORT + i)
        with open("./benchmark/.dns.json","w") as f:
            json.dump(dns, f, indent=4, sort_keys=True)

    
    def _print(self):
        print('------------------------------------------------')
        print(' For {} faults'.format(self.faults))
        print('------------------------------------------------')
        print('Total number of nodes: {}'.format(self._get_total_number_nodes()))
        print('Cliques: {}'.format(self._get_cliques()))
        print('Number of shadows: {}'.format(self._get_number_shadows()))
        print('------------------------------------------------')
    
    def _create_network_params_file(self, path='./benchmark/.network_params.json'):
        all_nodes = [i for i in range(self._get_total_number_nodes())]
        honest_parties = [i for i in range(self._get_number_honest_parties())]
        nodes = {}
        cliques = self._get_cliques()
        for node in all_nodes:
            nodes['node_'+str(node)] = {}
            for number in range(self.number_recoveries + 2):
                nodes['node_'+str(node)][str(number)] = []
            for clique in cliques:
                if node not in clique:
                    for node_not_in_clique in clique:
                        for number1 in range(self.number_recoveries + 2):
                            nodes['node_'+str(node)][str(number1)].append('127.0.0.1:'+str(BASE_PORT+node_not_in_clique))
        # Right here nodes has all nodes not in the clique in all stages of the firewall
        #for node in honest_parties:
        #    nodes_to_remove = 3
        #    for i,firewall in enumerate(nodes['node_'+str(node)]):
                #if int(firewall[len(firewall)-1]) >= node:
        #        if int(firewall) >= node:
        #            for number in range(nodes_to_remove+1):
        #                if '127.0.0.1:'+str(BASE_PORT+number) in nodes['node_'+str(node)][firewall]:
        #                    nodes['node_'+str(node)][str(i)].remove('127.0.0.1:'+str(BASE_PORT+number))
        #        nodes_to_remove += 1;
        for original_honest in honest_parties:
            # Get which cliques the honest node does not participates in
            original_honest_clique = []
            for clique in cliques:
                if original_honest not in clique:
                    original_honest_clique.append(clique)
            for other_honest in honest_parties:
                # Now we need to remove everyone who's not in the clique from first recovery (make it modular)
                for rest_cliques in original_honest_clique:
                    if other_honest in rest_cliques:
                            nodes["node_"+str(original_honest)][str(self.number_recoveries-1)].remove("127.0.0.1:"+str(BASE_PORT+other_honest))
                            nodes["node_"+str(original_honest)][str(self.number_recoveries+1)].remove("127.0.0.1:"+str(BASE_PORT+other_honest))
                if '127.0.0.1:'+str(BASE_PORT+other_honest) not in nodes["node_"+str(original_honest)][str(self.number_recoveries)] \
                        and other_honest != original_honest \
                        and '127.0.0.1:'+str(BASE_PORT+other_honest) in nodes["node_"+str(original_honest)]['0']:
                    nodes["node_"+str(original_honest)][str(self.number_recoveries)].append('127.0.0.1:'+str(BASE_PORT+other_honest))

        nodes['num_of_twins'] = self._get_number_shadows()
        nodes['allow_communications_at_round'] = self.allow_communications
        nodes['network_delay'] = self.network_delay
        firewall_len = len(nodes["node_0"])
        for node in all_nodes:
            nodes['node_'+str(node)][str(firewall_len)] = []
            for clique in cliques:
                if node not in clique:
                    for node_not_in_clique in clique:
                        if node_not_in_clique >= self.faults + 1:
                            nodes['node_'+str(node)][str(firewall_len)].append('127.0.0.1:'+str(BASE_PORT+node_not_in_clique))

        for node in nodes:
            print('{}: {}\n-----------------------------------------------------'.format(node, nodes[node]))


        with open(path, 'w') as f:
            json.dump(nodes, f, indent=4, sort_keys=True)

        #    for other_node in honest_parties:
        #        string_to_remove = '127.0.0.1:'+str(BASE_PORT+other_node)
        #        if string_to_remove in nodes['node_'+str(node)]['new_firewall']:
        #            nodes['node_'+str(node)]['new_firewall'].remove(string_to_remove)
        
        return nodes

#for i in range(1,4):
#    scenario = Scenario(i)
scenario = Scenario(6, 2, allow_communications = 200)
scenario._print()
scenario._create_network_params_file()
scenario._create_dns_file()
